package unsynch;
 
    import java.util.*;
 
    /**
     * A bank with a number of bank accounts.
     * @version 1.30 2004-08-01
     * @author Cay Horstmann
    */
   public class Bank
   {
      private final double[] accounts;

      /**
       * Constructs the bank.
       * @param n the number of accounts
       * @param initialBalance the initial balance for each account
       */
      public Bank(int n, double initialBalance)
      {
         accounts = new double[n];
         Arrays.fill(accounts, initialBalance);
      }

     /**
26       * Transfers money from one account to another.
27       * @param from the account to transfer from
28       * @param to the account to transfer to
29       * @param amount the amount to transfer
30       */
      public void transfer(int from, int to, double amount)
      {
         if (accounts[from] < amount) return;
         System.out.print(Thread.currentThread());
         accounts[from] -= amount;
         System.out.printf(" %10.2f from %d to %d", amount, from, to);
         accounts[to] += amount;
         System.out.printf(" Total Balance: %10.2f%n", getTotalBalance());
      }

      /**
42       * Gets the sum of all account balances.
43       * @return the total balance
44       */
      public double getTotalBalance()      {
        double sum = 0;

         for (double a : accounts)
            sum += a;

         return sum;
      }

      /**
       * Gets the number of accounts in the bank.7       * @return the number of accounts
       */
      public int size()
      {
         return accounts.length;
      }
   }
------------------------------------------------------------------------------------------

package unsynch;

/**
 * This program shows data corruption when multiple threads access a data
 * structure.
 *
 * @version 1.31 2015-06-21
 * @author Cay Horstmann
 */
public class UnsynchBankTest {

    public static final int NACCOUNTS = 100;
    public static final double INITIAL_BALANCE = 1000;
    public static final double MAX_AMOUNT = 1000;
    public static final int DELAY = 10;

    public static void main(String[] args) {
        Bank bank = new Bank(NACCOUNTS, INITIAL_BALANCE);
        for (int i = 0; i < NACCOUNTS; i++) {
            int fromAccount = i;
            Runnable r = () -> {
                try {
                    while (true) {
                        int toAccount = (int) (bank.size() * Math.random());
                        double amount = MAX_AMOUNT * Math.random();
                        bank.transfer(fromAccount, toAccount, amount);
                        Thread.sleep((int) (DELAY * Math.random()));
                    }
                } catch (InterruptedException e) {
                }
            };
            Thread t = new Thread(r);
            t.start();
        }
    }
}
